# user_router.py

from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from keyboards import *
from states import *
from db_request import *
from decorators import *

user_router = Router()

# user_router.py

@user_router.message(CommandStart())
@check_ban
async def command_start_handler(message: Message) -> None:
        await message.answer(
            f"<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è, <i>{message.from_user.full_name}</i></b>\n\n" +
            "–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–º –Ω–∞—à–µ–≥–æ –ö–ê–ó.–°—Ç–æ–ª–æ–≤—ã–µ ‚Äî –≤–∞—à–µ–≥–æ –≤–µ—Ä–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ –º–∏—Ä–µ –≤–∫—É—Å–Ω–æ–π –∏ –∑–¥–æ—Ä–æ–≤–æ–π –ø–∏—â–∏!" +
            "–° –Ω–∞—à–∏–º –±–æ—Ç–æ–º –≤—ã –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≤ –∫—É—Ä—Å–µ —Å–∞–º—ã—Ö —Å–≤–µ–∂–∏—Ö –∏ –∞–ø–ø–µ—Ç–∏—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –±–ª–∏–∂–∞–π—à–∏—Ö —Å—Ç–æ–ª–æ–≤—ã—Ö.\n\n" +
            "<b>–ß—Ç–æ –º–æ–∂–µ—Ç –Ω–∞—à –ß–∞—Ç-–ë–æ—Ç?</b>\n\n" +
            "üçΩÔ∏è <i>–ú–µ–Ω—é –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å:</i> –£–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞ –≤ –≤–∞—à–µ–π –ª—é–±–∏–º–æ–π —Å—Ç–æ–ª–æ–≤–æ–π.\n" +
            "üí∏ <i>–ê–∫—Ü–∏–∏:</i> –ë—É–¥—å—Ç–µ –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö —Å–∫–∏–¥–æ–∫ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.\n" +
            "üìÖ <i>–û—Ç–∑—ã–≤—ã:</i> –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–∏—Ö —Å—Ç–æ–ª–æ–≤—ã—Ö\n\n" +
            "<b>–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å?</b>\n\n" +
            "üåü <i>–£–¥–æ–±—Å—Ç–≤–æ:</i> –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ ‚Äî –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏\n" +
            "üåü <i>–°–∫–æ—Ä–æ—Å—Ç—å:</i> –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.\n" +
            "üåü <i>–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è:</i> –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n\n" +
            "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –≤–∫—É—Å–Ω–æ–π –∏ –ø–æ–ª–µ–∑–Ω–æ–π –µ–¥–æ–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! üçîüçü\n\n" +
            "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç-–±–æ—Ç–æ–º –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n\n"+
            "<b>–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b>",
            reply_markup=get_keyboard_register()
        )

@user_router.callback_query(F.data == 'register')
@check_ban
async def process_callback_register(callback_query: CallbackQuery, state: FSMContext):
    telegram_id = callback_query.from_user.id
    if check_account(telegram_id):
        await callback_query.message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
    else:
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞:")
        await state.set_state(RegistrationStates.waiting_for_department_number)

@user_router.message(RegistrationStates.waiting_for_department_number)
@check_ban
async def process_department_number(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    sp_number = message.text
    username = message.from_user.username
    department = session.query(Department).filter_by(number=sp_number).first()

    if not department:
        await message.answer("–û—Ç–¥–µ–ª —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–∞ —Å–Ω–æ–≤–∞:")
        return

    new_user = User(telegram_id=telegram_id, username=username, department_id=department.id)
    session.add(new_user)
    try:
        session.commit()
        session.close()
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", reply_markup=get_canteens_keyboard())
    except IntegrityError as e:
        session.rollback()
        session.close()
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. {str(e)}")

    await state.clear()

@user_router.message(F.text.in_(get_all_canteens()))
@check_ban
@check_account_exists
async def process_canteen_selection(message: Message, state: FSMContext):
    selected_canteen = message.text
    await state.update_data(selected_canteen=selected_canteen)
    await message.answer(f"–†–µ–π—Ç–∏–Ω–≥ –¥–∞–Ω–Ω–æ–π —Å—Ç–æ–ª–æ–≤–æ–π: {get_average_rating(selected_canteen)}", reply_markup= get_menu_keyboard())

@user_router.message(F.text == "–ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
@check_ban
@check_account_exists
async def process_menu_request(message: Message, state: FSMContext):
    data = await state.get_data()
    selected_canteen = data.get('selected_canteen')
    if not selected_canteen:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–æ–≤—É—é.")
        return

    menu = get_menu_for_today(selected_canteen)
    await message.answer(menu, parse_mode='HTML')

@user_router.message(F.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
@check_ban
@check_account_exists
async def process_main_menu_request(message: Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_canteens_keyboard())

@user_router.message(F.text == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
@check_ban
@check_account_exists
async def process_review_request(message: Message, state: FSMContext):
    data = await state.get_data()
    selected_canteen = data.get('selected_canteen')
    if not selected_canteen:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–æ–≤—É—é.")
        return

    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–æ–ª–æ–≤—É—é {selected_canteen}. –í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ç–æ–ª–æ–≤–æ–π (–æ—Ç 1 –¥–æ 5):")
    await state.set_state(ReviewStates.waiting_for_rating)

@user_router.message(ReviewStates.waiting_for_rating)
@check_ban
@check_account_exists
async def process_rating(message: Message, state: FSMContext):
    try:
        rating = int(message.text)
        if rating < 1 or rating > 5:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (–æ—Ç 1 –¥–æ 5):")
        return

    await state.update_data(rating=rating)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–∑—ã–≤—É:")
    await state.set_state(ReviewStates.waiting_for_comment)

@user_router.message(ReviewStates.waiting_for_comment)
@check_ban
@check_account_exists
async def process_comment(message: Message, state: FSMContext):
    comment = message.text
    data = await state.get_data()
    selected_canteen = data.get('selected_canteen')
    rating = data.get('rating')
    telegram_id = message.from_user.id

    result = add_review(telegram_id, selected_canteen, rating, comment)
    await message.answer(result, reply_markup=get_canteens_keyboard())
    await state.clear()
